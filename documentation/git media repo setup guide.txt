Assuming the git repo for orca media files with call-catalog.yaml is placed in https://github.com/sfu-bigdata/srkw-call-catalogue-files.git

1. [Production Server] Setting up the repo in production server - creating bare repository
mkdir ~/<folder name e.g. proj or proj_srkw_files>
cd ~/<folder name e.g. proj or proj_srkw_files>
git init --bare

2. [Production Server] Create git hook
nano hooks/post-receive

3. [Production Server] Git Hook Scripts below
where:
srkw-call-catalogue-files is the repo https://github.com/sfu-bigdata/srkw-call-catalogue-files.git
proj_srkw_files is the repo created in (1)
location of the call-catalog.yaml and call-catalog.json (used in website rendering) is in /usr/share/nginx/html/resources_config/
/usr/share/nginx/html/code/read_files.py is used to generated call-catalog.json from updated call-catalog.yaml

#!/bin/bash
while read oldrev newrev ref
do
if [[ $ref =~ .*/main$ ]];
then
echo "Main ref received.  Deploying main branch to production..."
git --work-tree=/usr/share/nginx/html/srkw-call-catalogue-files --git-dir=$HOME/proj_srkw_files checkout -f main
cp /usr/share/nginx/html/srkw-call-catalogue-files/call-catalog.yaml /usr/share/nginx/html/resources_config/call-catalog.yaml
python3 /usr/share/nginx/html/code/read_files.py /usr/share/nginx/html/resources_config/call-catalog.yaml /usr/share/nginx/html/resources_config/call-catalog
else
echo "Ref $ref successfully received.  Doing nothing: only the main branch may be deployed on this server."
fi
done

4. [Production Server] Make the script executable for the hook to work:
chmod +x hooks/post-receive

5. [local] Go into the working directory of your project in local machine with the repo

6. [local] Add the remote server as a remote called production

git remote add production bdh@orca:proj_srkw_files

7. [local] Push changes to website
git add .
git commit -m "changes from media repo srkw-call-catalogue-files"
git push production main

## supplementary server-side deployment commands (2022-Aug)

- The present working directory is relevant for `git` (and `git clone`) commands. These commands must be run from `/var/www/repos` to avoid unexpected behaviour.
- The git repo and repo files are in separate directories. Any git commands must explicitly specify these folders.
-- `--work-tree=/var/www/html/call-catalog-viewer` is used for the repo files
-- `--git-dir=/var/www/repos/call-catalog-viewer` is used for git files

cd /var/www/repo

clone viewer
GIT_SSH_COMMAND="ssh -i /data/deploy-keys/id_rsa_srkw_deploy_www-data \
 -o UserKnownHostsFile=/data/deploy-keys/www-data_known_host" git --work-tree=/var/www/html/call-catalog-viewer --git-dir=/var/www/repos/call-catalog-viewer clone git@github.com:coastal-science/call-catalog-viewer.git

Confirm with fetch
GIT_SSH_COMMAND="ssh -i /data/deploy-keys/id_rsa_srkw_deploy_www-data \
 -o UserKnownHostsFile=/data/deploy-keys/www-data_known_host" git --work-tree=/var/www/html/call-catalog-viewer --git-dir=/var/www/repos/call-catalog-viewer fetch --all -v

clone data files
GIT_SSH_COMMAND="ssh -i /data/deploy-keys/id_rsa_srkw_deploy_files \
 -o UserKnownHostsFile=/data/deploy-keys/www-data_known_host" git --work-tree=/var/www/html/srkw-call-catalogue-files --git-dir=/var/www/repos/srkw-call-catalogue-files clone git@github.com:sfu-bigdata/srkw-call-catalogue-files.git

Confirm with fetch
GIT_SSH_COMMAND="ssh -i /data/deploy-keys/id_rsa_srkw_deploy_files \
-o UserKnownHostsFile=/data/deploy-keys/www-data_known_host" git --work-tree=/var/www/html/viewer/srkw-call-catalogue-files --git-dir=/var/www/repos/srkw-call-catalogue-files fetch --all -v

Connect
cd /var/www/html/call-catalog-viewer
ln -s ../srkw_call_catalogue_files srkw_call_catalogue_files

update data into viewer
cp srkw-call-catalogue-files/call-catalog.yaml resources_config/call-catalog.yaml 
python3 code/read_files.py resources_config/call-catalog.yaml resources_config/call-catalog

The final folder structure us expected to be:
```
/var/www/
└───html
│   │   catalog-viewer
│   │   │   css
│   │   │   index.html
│   │   │   js
│   │   │   ...
│   │   └── srkw-call-catalogue-files -> ../srkw-call-catalogue-files
│   │   srkw_call_catalogue_files
│   │   │   ...
│   │   │   media/
│   │   └── call-catalog.yaml
└───repos
    │   catalog-viewer
    │   │   config
    │   └── HEAD...
    └───srkw_call_catalogue_files
        │   config
        └── HEAD...
```

To tell Git that you want your own independent version of the file or folder (`library` or `catalog`). For instance, you don't want to overwrite (or delete) production/staging config files.

cd /var/www/html/call-catalog-viewer
git update-index --skip-worktree catalogs/index.yaml

It's important to know that git update-index will not propagate with Git, so each user will have to run it independently. https://stackoverflow.com/a/40272289