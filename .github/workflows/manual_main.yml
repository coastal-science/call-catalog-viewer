name: Manual deployment
# This is a basic workflow that is manually triggered to activate a webhook on the deployment server
# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow requests.
    inputs:
      branch:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Which branch do you want to deploy on the production server?'
        # Default value if no value is explicitly provided
        #default: main
        # Input has to be provided for the workflow to run
        required: false
        type: choice
        options:
        - main
        - develop
        - front-end

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  input-branch-sha:
    name: Get SHA of selected branch
    runs-on: ubuntu-latest
    #if: $GITHUB_REF != ${{ github.event.inputs.branch }}
    outputs:
      ref: ${{ steps.commits.outputs.ref }}
      before: ${{ steps.commits.outputs.before }}
      after: ${{ steps.commits.outputs.after }}
    steps:
      # Checkout and get SHA
      - id: commits
        # Get latest branch details
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 2
      - run: |
          git checkout ${{ github.event.inputs.branch }}
          BRANCH_SHA=`git log -1 '--format=format:%H'`
          echo "::set-output name=BRANCH_SHA::$BRANCH_SHA"
          #echo "::set-output name=GITHUB_REF::${{ github.event.inputs.branch }}"

          after=`git show-ref --heads ${{ github.event.inputs.branch }} | cut -d" " -f1`
          head=`git show-ref --heads ${{ github.event.inputs.branch }} | cut -d" " -f2`
          before=`git log --pretty=%P -n 1 ${{ github.event.inputs.branch }}`
          echo $head
          echo $after
          echo $before
          echo $GITHUB_REF $GITHUB_SHA
          echo ${{ github.event.inputs.branch }}
          #echo "::set-output name=GITHUB_SHA::$BRANCH_SHA"
          echo "::set-output name=ref::$ref"
          echo "::set-output name=before::$before"
          echo "::set-output name=after::$after"
  
  deploy-main:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: input-branch-sha

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Selected branch 
      run: echo "Deploying branch ${{ github.event.inputs.branch }}"

    - name: Get Event Payload
      id: set_var
      # Read event payload: https://stackoverflow.com/a/61919791
      # The GH Webhook is already configure to receive the complete event data
      # But the action /distributhor/workflow-webhook sends a handful of 'event' details in the payload
      # The complete envent data is in $GITHUB_EVENT_PATH
      # The ouput of this step is available with ${{ steps.set_var.outputs.packageJson }}
      run: |
          echo "::group::Get Event Payload"
          content=`cat $GITHUB_EVENT_PATH`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"
          echo "::endgroup::"

    - name: See Event Payload
        #group log lines
      run: |
        echo "::group::Event Payload"
        echo "${{ steps.set_var.outputs.packageJson }}"
        echo "::endgroup::"

    # From marketplace "Workflow Webhook Action"
    - name: Workflow Webhook Action
      # You may pin to the exact commit or the version.
      # uses: distributhor/workflow-webhook@3b1dfb659938cacd1f6eab6e2c79478b5b1ac06f
      uses: distributhor/workflow-webhook@v2.0.4
      env:
        # The HTTP URI of the webhook endpoint to invoke
        webhook_url: ${{ secrets.WEBHOOK_URL }}
        # The secret with which a signature hash is generated
        webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
        # Credentials to be used for BASIC authentication (optional)
        # webhook_auth: 
        # json | form-urlencoded | json-extended
        webhook_type: json-extended # optional
              # 'json' payload contains six default keys and a data key with a nested dict
              # 'json-extended' send the raw 'event' data (from step 1, steps.set_var.outputs.packageJson)
        # Optional, set to true to enable verbose output. Warning: this might lead to domain and IP leaking, as well as other security issues as the logs are public.
        verbose: true # optional
        # Optional, set to true to disable output and therefore IP leaking
        silent: false # optional
        # Optional, set a maximum time, in seconds, by which to establish a connection to the server
        #timeout: # optional
        # Optional, set to false to disable verification of SSL certificates
        #verify_ssl: # optional, default is true
        # Optional additional data to include in the payload
        #data: # optional
        #data: '{ "token": "${{ secrets.GITHUB_TOKEN }}" }'
        #data: ${{ steps.set_var.outputs.packageJson }}
    
    - name: Append commit data
      # Append commit data for GH Webhook compatibility
      # add keys:value at root level and update a JSON file in place
      run: |
        echo ${{ steps.set_var.outputs.packageJson }}
        echo ${{ needs.input-branch-sha.outputs.ref }}
        
    - name: Final Payload
        #group log lines
      run: |
        echo "::group::Expected Payload"
        #content=`cat $GITHUB_EVENT_PATH`
        ## the following lines are only required for multi line json
        #content="${content//'%'/'%25'}"
        #content="${content//$'\n'/'%0A'}"
        #content="${content//$'\r'/'%0D'}"
        ## end of optional handling for multi line json
        
        #echo "::set-output name=packageJson::$content"
          
        echo "${{ steps.set_var.outputs.packageJson }}"
        echo "::endgroup::"
